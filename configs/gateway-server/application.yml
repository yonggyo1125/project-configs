spring:
  data:
    redis:
      host: localhost
      port: 6379
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true                    # 서비스 디스커버리 등록 서비스들을 기반으로 동적 라우트를 자동 생성합니다.
          # (예: Eureka에 등록된 서비스가 있을 때 lb://{serviceId} 라우트가 자동 생성)
          lower-case-service-id: true      # 서비스 ID를 소문자로 변환하여 라우트 생성합니다.
          # (Spring의 relaxed binding으로 lower-case-service-id 또는 lowerCaseServiceId 모두 허용)

      routes:                             # 수동으로 정의하는 정적 라우트 목록입니다.
        - id: product-service             # 라우트 식별자(유일해야 함). 로그·디버깅 목적이나 actuator에서 사용됩니다.
          uri: lb://product-service       # 라우트 목적지. 'lb://' 접두사는 클라이언트 사이드 로드밸런싱(lB)을 사용함을 의미합니다.
          # 실제 대상은 서비스 디스커버리(Eureka 등)에 등록된 product-service 인스턴스들입니다.
          predicates:
            - Path=/v1/product/**        # 이 라우트가 적용될 요청 경로 조건. 와일드카드 사용 가능.
          filters:
            - 'RewritePath=/v1/product/(?<path>.*), /\${path}'
              # 들어오는 요청 경로에서 /v1/product/ 부분을 제거하여 백엔드에 전달합니다.
              # 예: /v1/product/123 -> /123
              # 주의: ${path}가 스프링 프로퍼티 치환으로 평가되지 않도록 '\${path}' 형태로 이스케이프합니다.
            # 작은따옴표로 감싸면 YAML 파싱 측면에서 안전합니다.

        - id: order-service               # 두 번째 라우트 예시
          uri: lb://order-service
          predicates:
            - Path=/v1/order/**
          filters:
            - 'RewritePath=/v1/order/(?<path>.*), /\${path}' # /v1/order/** 요청을 /{path} 형태로 백엔드에 전달
            - name: RequestRateLimiter #Gateway가 제공하는 요청 속도 제한 필터입니다. 기본적으로 Redis 기반 RateLimiter를 사용하도록 구성한 예입니다.
              args:
                redis-rate-limiter.replenishRate: 10 # 초마다 채워지는 토큰 수입니다. 예: 10이면 평균적으로 초당 10개의 요청을 허용합니다.
                redis-rate-limiter.burstCapacity: 20 # 토큰 버킷의 최대 용량입니다. 짧은 순간의 트래픽 급증을 흡수할 수 있습니다. replenishRate보다 크게 설정하면 버스트 허용범위가 커집니다.
                redis-rate-limiter.requestedTokens: 1 # 한 요청이 소비하는 토큰 수입니다. (예: 리소스 무거운 요청은 2로 설정 가능)
                key-resolver: "#{@userKeyResolver}" # 어떤 키(예: 사용자 ID, API키, IP 등)를 기준으로 rate limiting을 적용할지 결정하는 Bean을 참조합니다. 표현식은 Spring EL로 Gateway 구성에서 미리 정의한 Bean을 참조하게 됩니다.


        # Gateway 라우트 설정: user-service로의 요청에 CircuitBreaker 필터 적용
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/v1/users/**
          filters:
            - 'RewritePath=/v1/users/(?<path>.*), /\${path}'
            - name: CircuitBreaker  # Gateway 필터 이름: Resilience4j 기반 CircuitBreaker 필터를 호출합니다.
              args:
                name: userServiceCircuitBreaker # 필터에서 사용할 회로차단기 인스턴스 이름(Resilience4j 설정의 인스턴스 키)
                fallbackUri: forward:/fallback/users # 회로가 열리거나 오류 발생 시 대체 처리할 엔드포인트
                  # 'forward:' 접두사는 내부 포워드(서버 내부 호출)를 의미합니다.
                  # 예: forward:/fallback/users -> 내부 컨트롤러의 /fallback/users 핸들러로 전달
                # 주의: external URL로 리디렉션하려면 'http://...' 형태 사용 가능하나 보안/루프 주의

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10                           # 슬라이딩 윈도우에 포함할 최근 호출 수 (통계 집계 기준)
        # 윈도우 크기가 크면 안정적인 통계, 작으면 민감도가 증가
        minimumNumberOfCalls: 5                         # 통계 집계를 시작하기 위한 최소 호출 수
        # 이 값보다 호출이 적으면 실패율 기반 판단을 하지 않음
        permittedNumberOfCallsInHalfOpenState: 3       # half-open 상태에서 허용할 시도 호출 수
        # 이 수치만큼 성공하면 closed로 전환 가능
        automaticTransitionFromOpenToHalfOpenEnabled: true
        # true면 open 상태에서 waitDuration 만료 후 자동으로 half-open 전환 시도
        waitDurationInOpenState: 5s                     # open 상태에서 다음 검사(half-open)로 전환까지 대기 시간
        # 단위: s (위 예시는 5초). 운영 환경에선 더 길게 설정 권장(예: 몇십 초)
        failureRateThreshold: 50                        # 실패 허용 비율(%) — 이 비율 이상이면 회로를 open으로 전환
        # 예: 50 -> 실패율이 50% 이상이면 오픈
        eventConsumerBufferSize: 10                     # CircuitBreaker 이벤트 버퍼 크기(모니터링/리스너용)
    instances:
      userServiceCircuitBreaker:
        baseConfig: default                            # 위에 정의한 default 설정을 이 인스턴스에 적용


management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
          # Actuator에서 노출할 엔드포인트 목록입니다.
        # gateway 항목을 포함해야 /actuator/gateway/** 관련 엔드포인트가 노출됩니다.
  endpoint:
    gateway:
      enabled: true                    # gateway actuator 엔드포인트 활성화 여부 (기본값 true이나 명시적으로 설정 권장)